#!/usr/bin/env python

from __future__ import division

import argparse

from hyperopt import fmin, hp, tpe, Trials
from hyperopt.mongoexp import MongoTrials

from lasvegas.hyper import objective


parser = argparse.ArgumentParser()
parser.add_argument('-n', '--training-games', default=1000, type=int,
                    help='number of games to use during training')
parser.add_argument('-N', '--eval-games', default=1000, type=int,
                    help='number of games to use during evaluation')
parser.add_argument('-e', '--max-evals', default=50, type=int,
                    help='maximum number of models to evaluate')
parser.add_argument('-m', '--mongo-url', default=None, type=str,
                    help='MongoDB URL to use for parallelizing trials')
parser.add_argument('-k', '--exp-key', default='lasvegas', type=str,
                    help='experiment key used when storing trials in MongoDB')
args = parser.parse_args()

# Define the space of hyperparameters to tune
space = {
    'DISCOUNT_RATE': hp.uniform('DISCOUNT_RATE', 0.5, 0.9),
    'EPSILON': hp.uniform('EPSILON', 0, 0.1),
    'LEARNING_MEMORY_SIZE': hp.quniform('LEARNING_MEMORY_SIZE', 50, 10000, 50),
    'MINIBATCH_SIZE': hp.quniform('MINIBATCH_SIZE', 1, 100, 10),
    'TIE_REWARD': hp.uniform('TIE_REWARD', 1, 500),
    'WIN_REWARD': hp.uniform('WIN_REWARD', 1, 1000),

    'kernel_initializer': hp.choice('kernel_initializer', [
        'lecun_uniform',
        'lecun_normal',
        'glorot_uniform',
        'random_uniform',
        'random_normal'
    ]),
    'activation': hp.choice('activation', ['relu', 'softmax', 'sigmoid']),
    'optimizer': hp.choice('optimizer', [
        'rmsprop',
        'sgd',
        'adagrad',
        'adadelta',
        'adam',
        'adamax',
        'nadam'
    ]),

    'training_games': args.training_games,
    'eval_games': args.eval_games
}

# Perform hyperparameter optimization and print the results
if args.mongo_url:
    trials = MongoTrials(args.mongo_url, exp_key=args.exp_key)
else:
    trials = Trials()

best = fmin(objective, space, algo=tpe.suggest, trials=trials,
            max_evals=args.max_evals)
print('')
for (key, val) in best.items():
    print('%s = %s' % (key, str(val)))
